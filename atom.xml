<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title></title>
  <link href="http://inparens.com/atom.xml" rel="self"/>
  <link href="http://inparens.com/"/>
  <updated>2011-08-09T20:29:06-07:00</updated>
  <id>http://inparens.com/</id>
  <author>
    <name>Matthew Bennett</name>
    
  </author>

  
  <entry>
    <title>Mapping Parent-Child Relationships With Dapper</title>
    <link href="http://inparens.com/2011/08/08/mapping-parent-child-relationships-with-dapper/"/>
    <updated>2011-08-08T17:39:00-07:00</updated>
    <id>http://inparens.com/2011/08/08/mapping-parent-child-relationships-with-dapper</id>
    <content type="html">&lt;p&gt;Dapper is a great, new (kind of), tiny database object mapper for the .NET framework. Its footprint is a single file. Drop it in your project and it adds a handful of extension methods to the &lt;code&gt;IDbConnection&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;Dapper's focus is on speed. According to the &lt;a href=&quot;http://code.google.com/p/dapper-dot-net/#Performance&quot; title=&quot;dapper-dot-net Performance (code.google.com)&quot;&gt;project's home page&lt;/a&gt;, it's barely slower than hand-coding your own mapping with a &lt;code&gt;SqlDataReader&lt;/code&gt;. What those few milliseconds buy you, though, is automatic mapping to your POCOs. Speed isn't free, though. But I'll get to that part later.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;Benefits&lt;/h3&gt;

&lt;p&gt;Take the following example class:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_1.widget.cs&quot; data-file=&quot;1.Widget.cs&quot;&gt;http://gist.github.com/1133111#file_1.widget.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;A hand-coded &lt;code&gt;SqlDataReader&lt;/code&gt; method to get all widgets would look something like this:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_2.get_all_widgets_with_sql_data_reader.cs&quot; data-file=&quot;2.GetAllWidgetsWithSqlDataReader.cs&quot;&gt;http://gist.github.com/1133111#file_2.get_all_widgets_with_sql_data_reader.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;A Dapper-powered method to get all widgets would look much simpler. Something like:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_3.get_all_widgets_with_dapper.cs&quot; data-file=&quot;3.GetAllWidgetsWithDapper.cs&quot;&gt;http://gist.github.com/1133111#file_3.get_all_widgets_with_dapper.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The &lt;code&gt;Query&lt;/code&gt; method used above is one of the extension methods provided by Dapper. Provide the type you want to map to and a corresponding SQL query and it will return an &lt;code&gt;IEnumerable&lt;/code&gt; of that type, populated with the results of the query.&lt;/p&gt;

&lt;p&gt;There's also an &lt;code&gt;Execute&lt;/code&gt; method, useful for updates and inserts. It takes a parameterized command and an &lt;code&gt;object&lt;/code&gt; parameter. It will then populate the parameters of the command with the properties of the &lt;code&gt;object&lt;/code&gt;, matching based on name.&lt;/p&gt;

&lt;p&gt;So, a (contrived) method to insert a new widget would look like:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_4.add_widget.cs&quot; data-file=&quot;4.AddWidget.cs&quot;&gt;http://gist.github.com/1133111#file_4.add_widget.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Dapper will scan the property names of the &lt;code&gt;object&lt;/code&gt; parameter--in this case, a populated &lt;code&gt;Widget&lt;/code&gt;--and populate the parameters of the command with the widget's property values.&lt;/p&gt;

&lt;p&gt;But, as I said before, Dapper's focus is on speed. So there are a few trade-offs in the deal.&lt;/p&gt;

&lt;h3&gt;Drawbacks&lt;/h3&gt;

&lt;p&gt;First, validation becomes your responsibility. Dapper doesn't automatically perform validation on inserts and updates (like, e.g., Entity Framework does, based on &lt;code&gt;DataAnnotations&lt;/code&gt; attributes and &lt;code&gt;IValidatableObject&lt;/code&gt; implementations).&lt;/p&gt;

&lt;p&gt;Another great feature that Entity Framework handles pretty much automatically is the mapping of object hierarchies.&lt;/p&gt;

&lt;p&gt;Take the following domain model:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_5.domain_model.cs&quot; data-file=&quot;5.DomainModel.cs&quot;&gt;http://gist.github.com/1133111#file_5.domain_model.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;And based on an assumed database schema, a &lt;code&gt;Category&lt;/code&gt; can have any number of &lt;code&gt;Widget&lt;/code&gt; children and a &lt;code&gt;Widget&lt;/code&gt; must have one and only one &lt;code&gt;Category&lt;/code&gt; parent.&lt;/p&gt;

&lt;p&gt;If you were to sprinkle a few &lt;code&gt;KeyAttribute&lt;/code&gt;s in there, Entity Framework would be able to track and validate the parent-child relationships for you automatically.&lt;/p&gt;

&lt;p&gt;Let's say we want to build a method that returns a collection of &lt;code&gt;Category&lt;/code&gt; instances, with their children populated. Dapper has overloads of the &lt;code&gt;Query&lt;/code&gt; method that allow you to use a single query to return multiple records per row. Perfect for generating an entire parnet-child object graph with a single &lt;code&gt;JOIN&lt;/code&gt; query, right?&lt;/p&gt;

&lt;p&gt;Not so fast.&lt;/p&gt;

&lt;p&gt;The previously mentioned overloads look like:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_6.query.cs&quot; data-file=&quot;6.Query.cs&quot;&gt;http://gist.github.com/1133111#file_6.query.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Where the first N types are the types being queried for (in the order in which they appear in the query) and the last type is the type of the &lt;code&gt;IEnumerable&lt;/code&gt; that will be returned. The &lt;code&gt;map&lt;/code&gt; parameter allows you to pass a function that tells Dapper how to map the objects in each row of the result to each other.&lt;/p&gt;

&lt;p&gt;So, a first pass:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_7.get_hierarchy_first_pass.cs&quot; data-file=&quot;7.GetHierarchyFirstPass.cs&quot;&gt;http://gist.github.com/1133111#file_7.get_hierarchy_first_pass.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;That SQL query will return one row per widget, with the category information for that widget's parent. Dapper doesn't care, though, that such a result set contains duplicate categories. So Dapper returns a collection of categories (containing duplicates), each with exactly one child widget.&lt;/p&gt;

&lt;p&gt;So, if your tree logically looked like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Category 1

&lt;ul&gt;
&lt;li&gt;Widget 1&lt;/li&gt;
&lt;li&gt;Widget 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Category 2

&lt;ul&gt;
&lt;li&gt;Widget 3&lt;/li&gt;
&lt;li&gt;Widget 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;...Dapper would return an object hierarchy that actually looks like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Category 1

&lt;ul&gt;
&lt;li&gt;Widget 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Category 1

&lt;ul&gt;
&lt;li&gt;Widget 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Category 2

&lt;ul&gt;
&lt;li&gt;Widget 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Category 2

&lt;ul&gt;
&lt;li&gt;Widget 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can't fix this with a simple &lt;code&gt;Distinct()&lt;/code&gt; call tacked on the result of &lt;code&gt;Query&lt;/code&gt;. This is because each of these categories are distinct objects with duplicate data, as opposed to being duplicate references to distinct objects. The &lt;code&gt;map&lt;/code&gt; function can be modified, however, to account for the duplicates:&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1133111#file_8.get_hierarchy.cs&quot; data-file=&quot;8.GetHierarchy.cs&quot;&gt;http://gist.github.com/1133111#file_8.get_hierarchy.cs&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; function now uses a dictionary to store and retrieve the distinct categories. Also note that &lt;code&gt;Distinct()&lt;/code&gt; has to be called on the final result. This is because &lt;code&gt;map&lt;/code&gt; must return a &lt;code&gt;Category&lt;/code&gt;, which means that &lt;code&gt;Query&lt;/code&gt; will be returning duplicates. But, due to the &lt;code&gt;lookup&lt;/code&gt; logic, &quot;duplicate&quot; in this case means duplicate references, unlike in the first pass implementaiton.&lt;/p&gt;

&lt;p&gt;Due to Dapper's focus on performance (and reducing instances of N+1 queries), you'd think they would highlight a use case like this on their website. Sadly, they don't. I had to dig down deep in their test cases to find the basic implementation above (in the &lt;a href=&quot;http://code.google.com/p/dapper-dot-net/source/browse/Tests/Tests.cs#824&quot; title=&quot;Tests.cs (code.google.com)&quot;&gt;ParentChildIdentityAssociations test&lt;/a&gt;), and even then, they don't provide comments as to why they're doing what they're doing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Arrays in Templates</title>
    <link href="http://inparens.com/2010/12/14/using-arrays-in-templates/"/>
    <updated>2010-12-14T19:56:00-07:00</updated>
    <id>http://inparens.com/2010/12/14/using-arrays-in-templates</id>
    <content type="html">&lt;p&gt;According to the official documentation, &lt;a href=&quot;http://api.jquery.com/tmpl/&quot; title=&quot;.tmpl() - jQuery API (api.jquery.com)&quot;&gt;&lt;code&gt;.tmpl()&lt;/code&gt;&lt;/a&gt;'s data parameter&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;hellip;can be any JavaScript type, including Array or Object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;!--more--&gt;


&lt;p&gt;The typical case would be to pass an object. This allows you to refer to the properties of that object by name in the template. &lt;a href=&quot;/demos/2010-12-14-using-arrays-in-templates.1.html&quot;&gt;Demo&lt;/a&gt;:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135981#file_using_arrays_as_templates.1.html&quot; data-file=&quot;usingArraysAsTemplates.1.html&quot;&gt;http://gist.github.com/1135981#file_using_arrays_as_templates.1.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Another typical case would be to pass an object that contains an array of values (not objects). &lt;a href=&quot;/demos/2010-12-14-using-arrays-in-templates.2.html&quot;&gt;Demo&lt;/a&gt;:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135981#file_using_arrays_as_templates.2.html&quot; data-file=&quot;usingArraysAsTemplates.2.html&quot;&gt;http://gist.github.com/1135981#file_using_arrays_as_templates.2.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The syntax for &lt;code&gt;{{each}}&lt;/code&gt; gives the current value an accessible name: &lt;code&gt;$value&lt;/code&gt;. That convention does not exist, however, outside of &lt;code&gt;{{each}}&lt;/code&gt; and the documentation does not describe the syntax for accessing the current value of an array when the array is the root data item. After looking through the source for the plugin and playing with &lt;code&gt;$item&lt;/code&gt;, I found that you can do it as follows. &lt;a href=&quot;/demos/2010-12-14-using-arrays-in-templates.3.html&quot;&gt;Demo&lt;/a&gt;:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135981#file_using_arrays_as_templates.3.html&quot; data-file=&quot;usingArraysAsTemplates.3.html&quot;&gt;http://gist.github.com/1135981#file_using_arrays_as_templates.3.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;code&gt;$item.data&lt;/code&gt; contains the data that the current template is acting on. It refers to the same value throughout a template. It doesn't, for example, refer to the current item in an &lt;code&gt;{{each}}&lt;/code&gt; iteration. Keep in mind, though, that if &lt;code&gt;.tmpl()&lt;/code&gt; is called with an array, the template is rendered once for each item in the array, which is why, in the above example, &lt;code&gt;$item.data&lt;/code&gt; refers to each individual value, not to the array that was passed in.&lt;/p&gt;

&lt;p&gt;Another example requiring the &lt;code&gt;$item.data&lt;/code&gt; syntax is when &lt;code&gt;.tmpl()&lt;/code&gt; is called with an object, but the object contains an array of values that will be passed to a nested template. &lt;a href=&quot;/demos/2010-12-14-using-arrays-in-templates.4.html&quot;&gt;Demo&lt;/a&gt;:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135981#file_using_arrays_as_templates.4.html&quot; data-file=&quot;usingArraysAsTemplates.4.html&quot;&gt;http://gist.github.com/1135981#file_using_arrays_as_templates.4.html&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>jQuery Templates Plugin</title>
    <link href="http://inparens.com/2010/12/13/jquery-templates-plugin/"/>
    <updated>2010-12-13T19:25:00-07:00</updated>
    <id>http://inparens.com/2010/12/13/jquery-templates-plugin</id>
    <content type="html">&lt;h3&gt;Requirements&lt;/h3&gt;

&lt;p&gt;jQuery Templates is a plugin to jQuery (requiring at least version 1.4.2), so your page will need to reference both jQuery and the templates plugin (in that order).&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;&lt;code&gt;script type=&quot;text/x-jquery-tmpl&quot;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Templates should be created as the contents of a &lt;code&gt;script&lt;/code&gt; tag with any &lt;code&gt;type&lt;/code&gt; other than &lt;code&gt;text/javascript&lt;/code&gt;. You don't have to use &lt;code&gt;script&lt;/code&gt; tags, but browsers completely ignore &lt;code&gt;script&lt;/code&gt; tags if the &lt;code&gt;type&lt;/code&gt; is not &lt;code&gt;text/javascript&lt;/code&gt; and it's likely that your template will contain text that would be parsed as invalid HTML (breaking your page), so it's best if you let the browser ignore it. Note that &lt;code&gt;text/javascript&lt;/code&gt; is the default type of a &lt;code&gt;script&lt;/code&gt; tag if you don't specify one, so a &lt;code&gt;type&lt;/code&gt; must be specified. It doesn't matter what &lt;code&gt;type&lt;/code&gt; you specify, though I would encourage consistency. You'll also want to give the &lt;code&gt;script&lt;/code&gt; tag an &lt;code&gt;id&lt;/code&gt; for easy referencing.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;.tmpl([ data ], [ options ])&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Both parameters to &lt;a href=&quot;http://api.jquery.com/tmpl/&quot; title=&quot;.tmpl() - jQuery API (api.jquery.com)&quot;&gt;&lt;code&gt;tmpl()&lt;/code&gt;&lt;/a&gt; are optional, though I can't think of a practical example for not passing a &lt;code&gt;data&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; can be any JavaScript type. If &lt;code&gt;data&lt;/code&gt; is an array, the template will be rendered once for each item in the array. Otherwise (including if &lt;code&gt;data&lt;/code&gt; is missing), the template will be rendered once.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;options&lt;/code&gt; is an object that contains properties and methods. There is a value named &lt;code&gt;$item&lt;/code&gt; that can be accessed in templates. It contains certain properties and methods defined by the plugin, but if &lt;code&gt;options&lt;/code&gt; is specified, &lt;code&gt;$item&lt;/code&gt; will be extended with &lt;code&gt;options&lt;/code&gt;' properties and methods. That's all I'll say about &lt;code&gt;options&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Note that since &lt;code&gt;data&lt;/code&gt; can be any type, if you want to specify &lt;code&gt;options&lt;/code&gt; but not &lt;code&gt;data&lt;/code&gt;, you'll still have to pass something (&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, etc.) in &lt;code&gt;data&lt;/code&gt;'s place.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tmpl()&lt;/code&gt; returns a jQuery collection of elements so it can be easily passed to any of the jQuery DOM insertion methods (&lt;code&gt;html()&lt;/code&gt;, &lt;code&gt;appendTo()&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;h3&gt;Template Tags&lt;/h3&gt;

&lt;p&gt;jQuery Templates includes a few tags for rendering data. Among others, it includes &lt;code&gt;${}&lt;/code&gt;, &lt;code&gt;{{if}}&lt;/code&gt; and &lt;code&gt;{{else}}&lt;/code&gt;, and &lt;code&gt;{{each}}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;${}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;${}&lt;/code&gt; tag is used for rendering content from the data passed to the template. &lt;code&gt;${}&lt;/code&gt; has no closing tag. If the template is currently rendering an object (let's call it &lt;code&gt;user&lt;/code&gt;), then &lt;code&gt;${name}&lt;/code&gt; would render the value of &lt;code&gt;user.name&lt;/code&gt;, &lt;code&gt;${emailAddress}&lt;/code&gt; would render the value of &lt;code&gt;user.emailAddress&lt;/code&gt;, and so on. If the template is currently rendering a value, &lt;code&gt;${$value}&lt;/code&gt; would render the value.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;{{if}}&lt;/code&gt; and &lt;code&gt;{{else}}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;{{if}}&lt;/code&gt; tag requires a closing &lt;code&gt;{{/if}}&lt;/code&gt; tag. &lt;code&gt;{{if}}&lt;/code&gt; takes a parameter that is the expression to evaluate in the form of &lt;code&gt;{{if expression}}&lt;/code&gt;. &lt;code&gt;{{else}}&lt;/code&gt; does not have a closing tag. The closing &lt;code&gt;{{/if}}&lt;/code&gt; or a new &lt;code&gt;{{else}}&lt;/code&gt; closes the previous &lt;code&gt;{{else}}&lt;/code&gt;. &lt;code&gt;{{else}}&lt;/code&gt; can be given an optional &lt;code&gt;expression&lt;/code&gt; parameter which will make it behave like &lt;code&gt;else if&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;{{each}}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;{{each}}&lt;/code&gt; tag is used for iterating over an array. It has a closing &lt;code&gt;{{/each}}&lt;/code&gt; tag. Everything between the two is rendered once for each item in the array. &lt;code&gt;{{each}}&lt;/code&gt; takes the array to be iterated as a parameter. If the array is called &lt;code&gt;items&lt;/code&gt;, it would be passed as &lt;code&gt;{{each items}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;{{each}}&lt;/code&gt; tag, &lt;code&gt;$value&lt;/code&gt; and &lt;code&gt;$index&lt;/code&gt; refer to the current value and the index of the current value, respectively. There is optional syntax that allows you to rename &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$value&lt;/code&gt;:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135937#file_1.jquery_templates.html&quot; data-file=&quot;1.jqueryTemplates.html&quot;&gt;http://gist.github.com/1135937#file_1.jquery_templates.html&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;Altogether Now&lt;/h3&gt;

&lt;p&gt;The code below can be viewed as a demo &lt;a href=&quot;/demos/2010-12-13-jquery-templates-plugin.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135937#file_2.jquery_templates.html&quot; data-file=&quot;2.jqueryTemplates.html&quot;&gt;http://gist.github.com/1135937#file_2.jquery_templates.html&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>CSS Media Queries</title>
    <link href="http://inparens.com/2010/12/09/css-media-queries/"/>
    <updated>2010-12-09T17:54:00-07:00</updated>
    <id>http://inparens.com/2010/12/09/css-media-queries</id>
    <content type="html">&lt;p&gt;Open up &lt;a href=&quot;http://www.colly.com&quot; title=&quot;Simon Collison (www.colly.com)&quot;&gt;www.colly.com&lt;/a&gt; or &lt;a href=&quot;http://lanyrd.com&quot; title=&quot;Lanyrd (lanyrd.com)&quot;&gt;lanyrd.com&lt;/a&gt; and (assuming you're using a modern browser) watch what happens as you resize your browser window. As the window size changes, the page's layout morphs to accomodate the window size. CSS includes a nice feature to target styles to particular media metrics, width being one of them. In real-time, the browser will apply different styles based on the various queries defined in the stylesheet. It's an incredibly useful feature for targeting your style not only to smaller desktop browsers but to mobile devices as well.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;Syntax&lt;/h3&gt;

&lt;p&gt;The query syntax can be specified either as an attribute of the stylesheet-referencing link elements (so that entire stylesheets are applied) or within stylesheets (so that groups of rules can be applied):&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135710#file_1.css_media_queries.html&quot; data-file=&quot;1.cssMediaQueries.html&quot;&gt;http://gist.github.com/1135710#file_1.css_media_queries.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;You can specify multiple criteria with the &lt;code&gt;and&lt;/code&gt; keyword. So there's no limit to the number of levels you could setup:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135710#file_2.css_media_queries.html&quot; data-file=&quot;2.cssMediaQueries.html&quot;&gt;http://gist.github.com/1135710#file_2.css_media_queries.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;code&gt;min-width: X px&lt;/code&gt; is equivalent to saying &lt;code&gt;width &amp;gt;= X&lt;/code&gt; and &lt;code&gt;max-width: X px&lt;/code&gt; is equivalent to saying &lt;code&gt;width &amp;lt;= X&lt;/code&gt;. So be mindful that if one query is for &lt;code&gt;max-width: 320px&lt;/code&gt; and another is for &lt;code&gt;min-width: 320px&lt;/code&gt;, they both pass if the browser is exactly 320 pixels wide.&lt;/p&gt;

&lt;h3&gt;Width vs. Device-Width&lt;/h3&gt;

&lt;p&gt;Mobile browsers, however, typically don't report their actual width for &lt;code&gt;width&lt;/code&gt;. For example, the iPhone, whose screen is either 320 pixels wide (for iPhone 3GS and below) or 640 pixels wide (for iPhone 4) reports a width value closer to 1000. Which means a query for &lt;code&gt;max-width: 320px&lt;/code&gt; on the iPhone would fail miserably.&lt;/p&gt;

&lt;p&gt;Luckily there's another property, &lt;code&gt;device-width&lt;/code&gt;, that gets us a bit closer. &lt;code&gt;device-width&lt;/code&gt; isn't necessarily equal to the actual pixel width of the device screen. It's an optimized value. For example, all models of the iPhone report a &lt;code&gt;device-width&lt;/code&gt; of 320.&lt;/p&gt;

&lt;p&gt;You don't want to use &lt;code&gt;min-device-width&lt;/code&gt; or &lt;code&gt;max-device-width&lt;/code&gt; in your queries, though, because the browser will still render the page as wide as the value of &lt;code&gt;device-width&lt;/code&gt;. So if you used &lt;code&gt;device-width&lt;/code&gt; queries on an iPhone and made your content 320 pixels wide, the content would be 320 pixels wide in a viewport that is still ~1000 pixels wide, giving you a huge gutter.&lt;/p&gt;

&lt;p&gt;But there's a way around these issues:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135710#file_3.css_media_queries.html&quot; data-file=&quot;3.cssMediaQueries.html&quot;&gt;http://gist.github.com/1135710#file_3.css_media_queries.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;This directive tells the browser to set its viewport's width to the value of &lt;code&gt;device-width&lt;/code&gt;. You would then query against &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; (as opposed to &lt;code&gt;min-device-width&lt;/code&gt; or &lt;code&gt;max-device-width&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;Getting Fancy with Transitions&lt;/h3&gt;

&lt;p&gt;If you resize lanyrd.com (and are using a supporting browser), you'll notice that certain elements (most noticeably the white box logo and the &quot;Lanyrd buzz&quot; speech bubbles) don't snap to a new style but animate smoothly to the new settings.&lt;/p&gt;

&lt;p&gt;This is done by setting &lt;a href=&quot;http://www.w3.org/TR/css3-transitions/&quot; title=&quot;CSS Transitions Module Level 3 (www.w3.org)&quot;&gt;CSS transitions&lt;/a&gt; on the settings that change for those elements from one style to the next. So if you had a wrapper div and you wanted its width to have an animated transition when it changed instead of snapping, you'd use something like:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135710#file_4.css_media_queries.html&quot; data-file=&quot;4.cssMediaQueries.html&quot;&gt;http://gist.github.com/1135710#file_4.css_media_queries.html&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;Putting It All Together&lt;/h3&gt;

&lt;p&gt;For brevity's sake, I won't post all the code here but you can view the source of the &lt;a href=&quot;/demos/2010-12-09-css-media-queries.html&quot;&gt;demo page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Minimizing HTTP Requests&lt;/h3&gt;

&lt;p&gt;All stylesheets are downloaded by the browser regardless of the outcome of media queries, which means using queries to target specific media won't prevent HTTP requests when the query fails.&lt;/p&gt;

&lt;p&gt;If, however, you use media queries to assign a background image, for example, and you have a large version and a small version, browsers will not download an image referenced in a stylesheet until there is an element that the rule's selector applies to. So you do prevent HTTP requests in that case. (This isn't a feature of media queries. It's default browser behavior. It does come in handy when combined with media queries, though.)&lt;/p&gt;

&lt;h3&gt;Progressive Enhancement&lt;/h3&gt;

&lt;p&gt;Progressive enhancement evangelists &lt;a href=&quot;http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu&quot; title=&quot;Rethinking the Mobile Web by Yiibu (www.slideshare.net)&quot;&gt;will tell you&lt;/a&gt; that your website's default styles should be its absolute baseline styles and that the page should build on those according to feature availability. (This usually gets translated as &quot;design for mobile and dynamically enhance the page for a desktop experience instead of the other way around.&quot;)&lt;/p&gt;

&lt;p&gt;CSS media queries sound like a great way to handle that&amp;hellip; And they would be&amp;hellip; If all browsers supported them&amp;hellip;&lt;/p&gt;

&lt;p&gt;IE9 will be the first version of IE to support media queries. So if your default styles were for mobile and you used media queries to add desktop styles, &lt;a href=&quot;http://gs.statcounter.com/#browser-ww-monthly-201006-201011-bar&quot; title=&quot;StatCounter Global Stats (gs.statcounter.com)&quot;&gt;roughly 50%&lt;/a&gt; of desktop browsers wouldn't be able to handle it. And I'm sure that there are plenty of mobile browsers out there that don't support media queries yet, either.&lt;/p&gt;

&lt;p&gt;Which leads to an unforunate conclusion if you want to rely solely on media queries: Whether you baseline for desktop and use media queries to dynamically assign styles for mobile, or you baseline for mobile and use media queries to dynamically assign styles for desktop, you're going to leave a non-trivial number of browsers out in the cold.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>jQuery Plugin Pattern</title>
    <link href="http://inparens.com/2010/11/07/jquery-plugin-pattern/"/>
    <updated>2010-11-07T17:31:00-07:00</updated>
    <id>http://inparens.com/2010/11/07/jquery-plugin-pattern</id>
    <content type="html">&lt;p&gt;This post is a followup to a previous post, &lt;a href=&quot;/2010/10/30/javascript-module-pattern/&quot; title=&quot;JavaScript Module Pattern&quot;&gt;JavaScript Module Pattern&lt;/a&gt;. &lt;a href=&quot;http://docs.jquery.com/Plugins/Authoring&quot; title=&quot;Plugins/Authoring (docs.jquery.com)&quot;&gt;jQuery's documentation&lt;/a&gt; encourages developers to use JavaScript's module pattern to create jQuery plugins. See the previous post if you're unfamiliar with the module pattern. jQuery itself is passed to the function as its module parameter, typically as &lt;code&gt;$&lt;/code&gt;. Plugins are defined within the module function by declaring functions on the &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;$.fn&lt;/code&gt; objects. Functions declared on &lt;code&gt;$&lt;/code&gt; are selector-independent and can return whatever the developer chooses. Functions declared on &lt;code&gt;$.fn&lt;/code&gt; are selector-dependent and should return a jQuery object to maintain jQuery's chainability.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;As an example, here's a plugin that provides enable and disable functionality for form controls:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135651#file_1.jquery_plugin_pattern.js&quot; data-file=&quot;1.jqueryPluginPattern.js&quot;&gt;http://gist.github.com/1135651#file_1.jquery_plugin_pattern.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;By creating closure around &lt;code&gt;$&lt;/code&gt;, the plugin can refer to jQuery using &lt;code&gt;$&lt;/code&gt;, even if scripts previously loaded in the page overwrote &lt;code&gt;$&lt;/code&gt; for some reason. It also won't overwrite that other developer's &lt;code&gt;$&lt;/code&gt; object. You're protected from their &lt;code&gt;$&lt;/code&gt; and vice versa.&lt;/p&gt;

&lt;p&gt;Within the functions, &lt;code&gt;this&lt;/code&gt; will refer to the jQuery object on which the function was invoked.&lt;/p&gt;

&lt;p&gt;The two plugin functions take advantage of jQuery's &lt;code&gt;each&lt;/code&gt; function to iterate the set of selected elements, operate on each one in turn, then return the elements to maintain jQuery's chainability.&lt;/p&gt;

&lt;p&gt;Notice in &lt;code&gt;disable&lt;/code&gt; that within the each call, only elements that match the ':input' criteria are disabled. I could have saved a couple lines of code and done the filtering by chaining it to the &lt;code&gt;each&lt;/code&gt; call:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135651#file_2.jquery_plugin_pattern.js&quot; data-file=&quot;2.jqueryPluginPattern.js&quot;&gt;http://gist.github.com/1135651#file_2.jquery_plugin_pattern.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;But then only the matching elements would have been returned by &lt;code&gt;disable&lt;/code&gt;. Sometimes you want your plugin to filter elements and only return certain ones. This is not one of those cases. Be mindful that the set of elements you want your plugin to operate on and the set of elements it should return aren't necessarily the same.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Module Pattern</title>
    <link href="http://inparens.com/2010/10/30/javascript-module-pattern/"/>
    <updated>2010-10-30T17:13:00-07:00</updated>
    <id>http://inparens.com/2010/10/30/javascript-module-pattern</id>
    <content type="html">&lt;p&gt;My co-developers at my previous job were not terribly JavaScript-inclined and I found myself describing a lot of the information below to them any time they looked at JavaScript code with me. I figured I would write it all down as reference.&lt;/p&gt;

&lt;p&gt;Not that this is original. &lt;a href=&quot;http://yuiblog.com/blog/2007/06/12/module-pattern/&quot; title=&quot;A JavaScript Module Pattern (yuiblog.com)&quot;&gt;YUI&lt;/a&gt; talked about it back in 2007. &lt;a href=&quot;http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth&quot; title=&quot;JavaScript Module Pattern: In-Depth (adequatelygood.com)&quot;&gt;Ben Cherry&lt;/a&gt; goes into much greater detail. &lt;a href=&quot;http://snook.ca/archives/javascript/no-love-for-module-pattern&quot; title=&quot;Why I Don't Love JavaScript's Module Pattern (snook.ca)&quot;&gt;Jonathan Snook&lt;/a&gt; is not a big fan. &lt;a href=&quot;http://www.google.com/search?q=javascript+module+pattern&quot; title=&quot;Search Results for &amp;quot;javascript module pattern&amp;quot; (google.com)&quot;&gt;On and on&lt;/a&gt;. I'm adding my two cents because I think it is important to first mention the aspects of JavaScript that make the pattern possible.&lt;/p&gt;

&lt;p&gt;The module pattern is extremely useful for namespacing your site's functionality to help prevent your code from overwriting others' code (and vice versa). Instead of putting your functionality on the global object where it can easily clobber or be clobbered by other globals, you tuck it away in an extensible module. And if necessary, you can have modules within modules within modules.&lt;/p&gt;

&lt;p&gt;But first, a few key JavaScript concepts that enable and naturally lead to the module pattern.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;Scope&lt;/h3&gt;

&lt;p&gt;Unlike other C-like languages (C-like in the sense of their block syntax), JavaScript does not use block scope&amp;mdash;it uses function scope. That is, variables declared within a function are not available outside that function. They are only available within the function in which they are declared.&lt;/p&gt;

&lt;p&gt;As a side note, variables are available everywhere within the function that declares them, even in code above the declaration. But you have to be very careful with this concept.&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_1.scope.js&quot; data-file=&quot;1.scope.js&quot;&gt;http://gist.github.com/1135611#file_1.scope.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;In the above example, &quot;Hi!&quot; will be alerted as you probably expect.&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_2.scope.js&quot; data-file=&quot;2.scope.js&quot;&gt;http://gist.github.com/1135611#file_2.scope.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;In the above example, however, you might expect &quot;Hello!&quot; to be alerted since the function has not declared its own message yet. Instead, &lt;code&gt;undefined&lt;/code&gt; is alerted. Basically, the above code gets interpreted something like this:&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_3.scope.js&quot; data-file=&quot;3.scope.js&quot;&gt;http://gist.github.com/1135611#file_3.scope.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;So that they are available throughout the entire function, the declarations (but not the initializations) of variables get &quot;hoisted&quot; to the top of the function in which they are declared. This is why JavaScript gurus (see Douglas Crockford's &lt;a href=&quot;http://javascript.crockford.com/code.html&quot; title=&quot;Code Conventions for the JavaScript Programming Language (javascript.crockford.com)&quot;&gt;JavaScript Code Conventions&lt;/a&gt; recommend always declaring variables at the top of the function in which they are used (as opposed to sprinkling declarations throughout the function) since that is how the browser is going to interpret it anyway.&lt;/p&gt;

&lt;p&gt;Hoisting does not really have anything to do with the module pattern directly. Do keep function scope in mind, though, as we continue.&lt;/p&gt;

&lt;h3&gt;Closure&lt;/h3&gt;

&lt;p&gt;Closure is an important concept that comes as an added benefit of function scope. Function scope says that variables are accessible anywhere in the function that declares them. Closure takes it one step further. Functions declared within a function have access to the outer function's declared variables&amp;mdash;even if the inner function has a longer lifetime than that of the outer function.&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_4.closure.js&quot; data-file=&quot;4.closure.js&quot;&gt;http://gist.github.com/1135611#file_4.closure.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The outer function (&lt;code&gt;createPerson&lt;/code&gt;) declares a variable (&lt;code&gt;_name&lt;/code&gt;). Due to function scope, the inner function (&lt;code&gt;getName&lt;/code&gt;) has access to the outer function's variables (&lt;code&gt;_name&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;joe&lt;/code&gt; is declared and initialized using the outer function. The outer function executes to completion. However, &lt;code&gt;joe&lt;/code&gt; still has access to &lt;code&gt;_name&lt;/code&gt; through the inner function, &lt;code&gt;getName&lt;/code&gt;. Effectively, &lt;code&gt;_name&lt;/code&gt; is a private variable accessible only through &lt;code&gt;joe&lt;/code&gt;'s &lt;code&gt;getName&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;The Module Pattern&lt;/h3&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_5.modulePattern.js&quot; data-file=&quot;5.modulePattern.js&quot;&gt;http://gist.github.com/1135611#file_5.modulePattern.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;The pattern is one big self-executing function. Start with the last line. &lt;code&gt;window.module&lt;/code&gt; is passed in. But first &lt;code&gt;window.module&lt;/code&gt; is set to the value of &lt;code&gt;window.module&lt;/code&gt; or, if that is undefined, an empty object.&lt;/p&gt;

&lt;p&gt;Another side note. The &lt;code&gt;||&lt;/code&gt; operator basically acts as a &quot;falsy&quot; coalescer. It will return the first &quot;truthy&quot; value in the (left-to-right) list (or the last value if none of the values are &quot;truthy&quot;). E.g., &lt;code&gt;(false || null || undefined || 'abc' || 123)&lt;/code&gt; will return &quot;abc&quot;. So, if &lt;code&gt;window.module&lt;/code&gt; has already been declared and has a value, it gets returned. Otherwise a new, empty object is returned. And it happens in an assignment, so whatever gets returned is stored in &lt;code&gt;window.module&lt;/code&gt;. (If you're familiar with C#, it's a lot like &lt;code&gt;??&lt;/code&gt;, the null coalescer.)&lt;/p&gt;

&lt;p&gt;So, using this pattern, you can break the module up into separate files if necessary and each subsequently loaded module file will just extend the existing module.&lt;/p&gt;

&lt;p&gt;Moving back up to the first line, the function accepts two parameters, the module itself and &lt;code&gt;undefined&lt;/code&gt;. However (as noted in the previous paragraph), the function is only called with the module parameter. This is just in case any previously run script decided to assign a new value to &lt;code&gt;undefined&lt;/code&gt;. &lt;code&gt;undefined&lt;/code&gt; is tricky like that. It is not a reserved word. It is just a variable with a special value set by the browser. There is no safeguard in place to prevent a developer from assigning a new value to it.&lt;/p&gt;

&lt;p&gt;Now, move into the function definition. JavaScript has no access modifiers. Variables can not be explicitly declared as public, private, etc. Function scope is used for privacy, though. Within the module function, any variables that are declared are available only in the module function (and, thanks to closure, any functions declared in the module function).&lt;/p&gt;

&lt;p&gt;Variables declared on the module parameter, however, will be available outside the module function since the module is declared on the &lt;code&gt;window&lt;/code&gt; (global) object.&lt;/p&gt;

&lt;p&gt;An added benefit of passing the module as a parameter to the function is that no matter what the module is declared as and referenced by the client code as, the module function can refer to it however it pleases.&lt;/p&gt;

&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/1135611#file_6.modulePattern.js&quot; data-file=&quot;6.modulePattern.js&quot;&gt;http://gist.github.com/1135611#file_6.modulePattern.js&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;That can be useful if you are minifying your scripts. You don't have to minify the name of your module just for the sake of minifying the code that extends it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Embedding GitHub Gists in Tumblr Posts</title>
    <link href="http://inparens.com/2010/10/20/embedding-github-gists-in-tumblr-posts/"/>
    <updated>2010-10-20T17:03:00-07:00</updated>
    <id>http://inparens.com/2010/10/20/embedding-github-gists-in-tumblr-posts</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;(Update; Aug 9th, 2011) This post was originally on my Tumblr blog. I have since migrated to &lt;a href=&quot;http://octopress.org/&quot; title=&quot;Octopress&quot;&gt;Octopress&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tumblr's utter lack of Gist support was pretty much a show-stopper for me, which is why this is my first post. In trying to figure out how to hack it myself, I ran across &lt;a href=&quot;http://jaredgrippe.com/&quot; title=&quot;Jarred Grippe&quot;&gt;Jarred Grippe&lt;/a&gt;'s post describing &lt;a href=&quot;http://jaredgrippe.com/post/243439007/github-gists-on-tumblr&quot; title=&quot;GitHub Gists on Tumblr&quot;&gt;how he hacked it&lt;/a&gt;. I refactored his solution a bit to add some error checking and a couple of features.&lt;/p&gt;

&lt;!--more--&gt;




&lt;p class=&quot;gist&quot;&gt;&lt;a href=&quot;http://gist.github.com/637764&quot;&gt;http://gist.github.com/637764&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Most of the magic comes from the call to &lt;code&gt;embedNextGist&lt;/code&gt; inside the &lt;code&gt;document.write&lt;/code&gt; overrides. Typically when scripts are being added to the page programatically, you have to be careful not to execute code that depends on the script before the script is loaded. For example, if I had instead just put &lt;code&gt;embedNextGist&lt;/code&gt; in a loop, all of the &lt;code&gt;document.write&lt;/code&gt; overrides and appending of script tags would have happened long before the first appended script even loaded. The calls to the overridden &lt;code&gt;document.write&lt;/code&gt; do not occur until the script has loaded, which would mean that all of the appended scripts would use whichever version of &lt;code&gt;document.write&lt;/code&gt; was provided in the last iteration of the loop. That is, each Gist would, in turn, write itself into the last &lt;code&gt;p.gist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But in this case, all of that trouble is circumvented by calling &lt;code&gt;embedNextGist&lt;/code&gt; from &lt;code&gt;document.write&lt;/code&gt; which is called by the appended script (a call which, naturally, cannot happen until the script is loaded).&lt;/p&gt;

&lt;p&gt;Two other small notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jarred's version writes the stylesheet link for every Gist that it handles. My version never writes the stylesheet link because I have that link as part of my Tumblr template.&lt;/li&gt;
&lt;li&gt;My version caches &lt;code&gt;document.write&lt;/code&gt; before processing Gists and restores it upon completion.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
</feed>
